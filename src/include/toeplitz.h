/*-
 * Copyright (c) 2015-2016 Rozhuk Ivan <rim@vedapro.ru>
 * All rights reserved.
 *
 *
 * Author: Rozhuk Ivan <rozhuk.im@gmail.com>
 *
 *
 */

#ifndef TOEPLITZ_H
#define TOEPLITZ_H


#ifndef _WINDOWS
#	include <sys/param.h>
#	ifdef __linux__ /* Linux specific code. */
#		define _GNU_SOURCE /* See feature_test_macros(7) */
#		define __USE_GNU 1
#	endif /* Linux specific code. */
#	include <sys/types.h>
#	ifdef _KERNEL
#		include <sys/systm.h>
#	else
#		include <string.h> /* memcpy, memmove, memset... */
#		include <inttypes.h>
#	endif
#	define toeplitz_print(__fmt, args...)	fprintf(stdout, (__fmt), ##args)
#else
#	include <stdlib.h>
#	include <string.h> /* memcpy, memmove, memset... */
#	include <stdint.h>
#	define uint8_t		unsigned char
#	define uint32_t		DWORD
#	define size_t		SIZE_T
#	define toeplitz_print()
#endif


typedef uint64_t	bn_digit_t;

/* Length of digit in bytes */
#define BN_DIGIT_SIZE	sizeof(bn_digit_t)

/* Length of digit in bits */
#define BN_DIGIT_BITS	(BN_DIGIT_SIZE * 8)

/* High digir bit */
#define BN_DIGIT_HI_BIT	(((bn_digit_t)1) << (BN_DIGIT_BITS - 1))

/* Maximum value of digit */
#define BN_MAX_DIGIT	((bn_digit_t)~0)

/* Maximum length in digits */
#define BN_MAX_DIGITS	(BN_BIT_LEN / BN_DIGIT_BITS)

#define TOEPLITZ_BITS2DIGITS_COUNT(__bits_cnt)	(((__bits_cnt) + (BN_DIGIT_BITS - 1)) / BN_DIGIT_BITS)

#define TOEPLITZ_PTR_IS_ALIGNED8(p)	(0 == (((size_t)p) & 7))
#define TOEPLITZ_PTR_TO64(ptr)		((bn_digit_t*)(void*)(size_t)(ptr))
#define TOEPLITZ_PTR_TO64_ALIGNED8(ptr)	((bn_digit_t*)(void*)((((size_t)ptr) + 7) & (~((size_t)7))))
#define TOEPLITZ_BITS2BYTES(__bits_cnt)	(((__bits_cnt) + 7) >> 3)
#define TOEPLITZ_GET_BIT(__buf, __bit)	(((((const uint8_t*)(__buf))[((__bit) >> 3)] >> ((__bit) & 0x07))) & 0x01)
#define TOEPLITZ_SET_BIT(__buf, __bit)	((uint8_t*)(__buf))[((__bit) >> 3)] |= (((uint8_t)1) << ((__bit) & 0x07))
#define TOEPLITZ_CLR_BIT(__buf, __bit)	((uint8_t*)(__buf))[((__bit) >> 3)] &= ~(((uint8_t)1) << ((__bit) & 0x07))

/* interpret four 8 bit unsigned integers as a 64 bit unsigned integer in little endian */
#define U8_8TO64_LITTLE(__ptr)	(					\
	(((const uint64_t)(((const uint8_t*)__ptr)[0]))      ) |	\
	(((const uint64_t)(((const uint8_t*)__ptr)[1])) <<  8) |	\
	(((const uint64_t)(((const uint8_t*)__ptr)[2])) << 16) |	\
	(((const uint64_t)(((const uint8_t*)__ptr)[3])) << 24) |	\
	(((const uint64_t)(((const uint8_t*)__ptr)[4])) << 32) |	\
	(((const uint64_t)(((const uint8_t*)__ptr)[5])) << 40) |	\
	(((const uint64_t)(((const uint8_t*)__ptr)[6])) << 48) |	\
	(((const uint64_t)(((const uint8_t*)__ptr)[7])) << 56))


/*
 * M = msg
 * m = msg_block_size (bits)
 * w = msg_size / msg_block_size
 * k = key
 * ((m + n) + (w * n)) = (m + ((w + 1) * n)) = key_size (bits)
 * n = hash_block_size (bits)
 */
/* Slow: proof of concept. */
static inline int
toeplitz_mult(const uint8_t *matr, size_t matr_size,
    size_t rows_count, size_t cols_count,
    const uint8_t *vec, size_t vec_size,
    uint8_t *res, size_t res_size) {
	size_t k, i, j, blocks_count;
	int itm, itm1, itm2;

	if (NULL == vec || NULL == matr || NULL == res || /* Ptrs check. */
	    0 == vec_size || 0 == cols_count || /* Sizes check. */
	    0 == matr_size || 0 == rows_count || /* Sizes check. */
	    0 != (vec_size % cols_count)) /* Is all message blocks complete? */
		return (EINVAL);

	blocks_count = (vec_size / cols_count); /* message blocks count */
	k = (blocks_count * rows_count);
	if (matr_size < (cols_count + rows_count - 1) || /* Matr to small? */
	    res_size < k) /* Result buf to small? */
		return (EINVAL);
	res_size = TOEPLITZ_BITS2BYTES(k);
	memset(res, 0, res_size);

	/* Do: (M*S). */
	for (k = 0; k < blocks_count; k ++) { /* Process message blocks. */
		for (i = 0; i < rows_count; i ++) { /* res size */
			/* Do: (M*S)^r. */

			/* Matrix mult: M*S, where k=(S,r0,r1,r2...rw) */
			itm = 0;
			for (j = 0; j < cols_count; j ++) { /* message block size */
				itm1 = TOEPLITZ_GET_BIT(vec, ((k * cols_count) + j));
				itm2 = TOEPLITZ_GET_BIT(matr, (rows_count + j - i - 1));
				if (itm1 && itm2) {
					itm ^= 1;
				}
			} /* j */
			/* Store result. */
			if (0 != itm) {
				TOEPLITZ_SET_BIT(res, ((k * rows_count) + i));
			}
		} /* i */
	} /* k */

	return (0);
}

static inline int
toeplitz_hash(const uint8_t *msg, size_t msg_size, size_t msg_block_size,
    const uint8_t *key, size_t key_size, size_t hash_block_size,
    uint8_t *hash, size_t hash_size) {
	int error;
	size_t blocks_count, msg_hash_block_size, tm, i;
	int itm1, itm2;

	if (NULL == msg || NULL == key || NULL == hash || /* Ptrs check. */
	    0 == msg_size || 0 == msg_block_size || /* Sizes check. */
	    0 == key_size || 0 == hash_block_size || /* Sizes check. */
	    0 != (msg_size % msg_block_size)) /* Is all message blocks complete? */
		return (EINVAL);

	/* Do: (M*S). */
	error = toeplitz_mult(key, key_size, hash_block_size,
	    msg_block_size, msg, msg_size, hash, hash_size);
	if (0 != error)
		return (error);
	blocks_count = (msg_size / msg_block_size); /* message blocks count */
	msg_hash_block_size = (msg_block_size + hash_block_size);
	tm = (blocks_count * hash_block_size);
	if (key_size < (msg_hash_block_size + tm - 1)) /* Key to small? */
		return (EINVAL);
	hash_size = tm;

	/* XOR with r */
	msg_hash_block_size --;
	for (i = 0; i < hash_size; i ++) {
		itm1 = TOEPLITZ_GET_BIT(hash, i);
		itm2 = TOEPLITZ_GET_BIT(key, (msg_hash_block_size + i));
		itm2 ^= itm1;
		if (itm2 == itm1)
			continue; /* Bit not changed. */
		/* Update bit. */
		if (itm2) {
			TOEPLITZ_SET_BIT(hash, i);
		} else {
			TOEPLITZ_CLR_BIT(hash, i);			
		}
	}

	return (0);
}


/* Optimized. */
/* Returns: Population Count (Ones Count) = log2 = popcount. */
static inline size_t
calc_digit_bits(bn_digit_t digit) {
	register size_t n;
	register bn_digit_t reg = digit;

#if 1
	reg -= ((reg >> 1) & 0x5555555555555555);
	reg = (((reg >> 2) & 0x3333333333333333) + (reg & 0x3333333333333333));
	reg = (((reg >> 4) + reg) & 0x0f0f0f0f0f0f0f0f);
	reg += (reg >> 8);
	reg += (reg >> 16);
	reg += (reg >> 32);
	n = (reg & 0x000000000000007f);
#else /* Original un optimized code. */
	if (0 == reg)
		return (reg);
	if (BN_MAX_DIGIT == reg)
		return (64);
	for (n = 0; 0 != reg; reg >>= 1)
		if (0 != (reg & 1))
			n ++;
#endif
	return (n);
}

/* Computes: a /= 2^bits (i.e. shifts right c bits). */
static inline void
bn_digits_r_shift_simple(bn_digit_t *a, size_t count, size_t bits) {
	register size_t i, crr_bits_cnt;

	crr_bits_cnt = (BN_DIGIT_BITS - bits);
	for (i = 0; i < (count - 1); i ++) {
		a[i] = ((a[i] >> bits) | (a[(i + 1)] << crr_bits_cnt));
	}
	a[i] = (a[i] >> bits);
}
/* Computes: a /= 2^bits (i.e. shifts right c bits). */
static inline void
bn_digits_r_shift_copy(bn_digit_t *a, size_t count,
    const uint8_t *buf, size_t buf_size, size_t bits) {
	register size_t i, crr_bits_cnt;

	if (NULL == a || 0 == count ||
	    NULL == buf || 0 == buf_size || 0 == bits)
		return;
	crr_bits_cnt = (7 & bits);
	i = (bits / 8);
	memcpy(((uint8_t*)a), (buf + i), (buf_size - i));
	memset((((uint8_t*)a) + (buf_size - i)), 0,
	    ((count * BN_DIGIT_SIZE) - (buf_size - i)));
	if (0 == crr_bits_cnt)
		return;
	bits -= (i * 8);
	count -= (i / BN_DIGIT_SIZE); /* Skip zero digits at end. */

	bn_digits_r_shift_simple(a, count, bits);
}

/* buf ^= data. */
static inline void
buf_xor(uint8_t *buf, const uint8_t *data, size_t buf_size) {
	register size_t i;

	if (NULL == buf || NULL == data || 0 == buf_size)
		return;

	for (i = 0; i < buf_size; i ++) {
		buf[i] ^= data[i];
	}
}
/* Computes: a /= 2^bits (i.e. shifts right c bits). */
static inline size_t
bn_digits_and_buf_get_xor_bit(bn_digit_t *a, const uint8_t *buf, size_t buf_size) {
	register size_t i, tm;
	register bn_digit_t digit = 0;
	bn_digit_t tmdig;

	tm = (buf_size / BN_DIGIT_SIZE);
	/* Is buf unaligned? */
	if (0 == TOEPLITZ_PTR_IS_ALIGNED8(buf)) {
		/* Unaligned slow AND. */
		for (i = 0; i < tm; i ++) {
			digit ^= (a[i] & U8_8TO64_LITTLE((buf + (BN_DIGIT_SIZE * i))));
		}
	} else {
		/* Aligned fast AND. */
		for (i = 0; i < tm; i ++) {
			digit ^= (a[i] & TOEPLITZ_PTR_TO64(buf)[i]);
		}
	}
	/* Tail. */
	tmdig = 0;
	tm *= BN_DIGIT_SIZE;
	memcpy(&tmdig, (buf + tm), (buf_size - tm));
	digit ^= (a[i] & tmdig);

	return ((calc_digit_bits(digit) & 1));
}

static inline int
toeplitz_mult_fast(const uint8_t *matr, size_t matr_size,
    size_t rows_count, size_t cols_count,
    const uint8_t *vec, size_t vec_size,
    uint8_t *tmbuf, size_t tmbuf_size, uint8_t *res, size_t res_size) {
	size_t k, i, cols_count_bytes, matr_items_count, blocks_count, digits_cnt, tm;
	bn_digit_t *digits;

	if (NULL == vec || NULL == matr || NULL == res || /* Ptrs check. */
	    0 == vec_size || 0 == cols_count || /* Sizes check. */
	    0 == matr_size || 0 == rows_count || /* Sizes check. */
	    0 != (vec_size % cols_count) || /* Is all message blocks complete? */
	    0 != (cols_count & 7)) /* Message block size must be multiple to 8 bit!  */
		return (EINVAL);

	blocks_count = (vec_size / cols_count); /* message blocks count */
	matr_items_count = (cols_count + rows_count);
	i = (blocks_count * rows_count);
	if (matr_size < (matr_items_count - 1) || /* Mart to small? */
	    res_size < i || /* Result buf to small? */
	    tmbuf_size < (TOEPLITZ_BITS2DIGITS_COUNT(matr_size) * BN_DIGIT_SIZE)) /* Buf to small? */
		return (EINVAL);
	res_size = TOEPLITZ_BITS2BYTES(i);
	memset(res, 0, res_size);
	cols_count_bytes = TOEPLITZ_BITS2BYTES(cols_count);

	/* Do: (M*S). */
	/* Get first row. */
	digits = TOEPLITZ_PTR_TO64_ALIGNED8(tmbuf); /* 64 bit alligned buf. */
	digits_cnt = TOEPLITZ_BITS2DIGITS_COUNT(matr_items_count);
	memcpy(digits, matr, TOEPLITZ_BITS2BYTES(matr_items_count));

	/*  */
	for (i = 0; i < rows_count; i ++) { /* rows. */
		/* Matrix mult: M*S, where k=(S,r0,r1,r2...rw) */
		tm = (rows_count - i - 1);
		for (k = 0; k < blocks_count; k ++) { /* Process message blocks. */
			/* Mult row and message: M*S: shifted matr &= vec. */
			/* Block must be multiple to 8 bit: 0 != (cols_count & 7). */
			/* Calc 1 bits count. */
			/* Store M*S result. */
			if (0 != bn_digits_and_buf_get_xor_bit(digits,
			    (vec + (k * cols_count_bytes)),
			    cols_count_bytes)) {
				TOEPLITZ_SET_BIT(res, ((k * rows_count) + tm));
			}
		} /* k */
		/* Get next row. */
		bn_digits_r_shift_simple(digits, digits_cnt, 1);
	} /* i */

	return (0);
}

static inline int
toeplitz_hash_fast(const uint8_t *msg, size_t msg_size, size_t msg_block_size,
    const uint8_t *key, size_t key_size, size_t hash_block_size,
    uint8_t *tmbuf, size_t tmbuf_size, uint8_t *hash, size_t hash_size) {
	int error;
	size_t blocks_count, msg_hash_block_size, tm;
	bn_digit_t *digits;

	/* Do: (M*S). */
	error = toeplitz_mult_fast(key, key_size, hash_block_size,
	    msg_block_size, msg, msg_size, tmbuf, tmbuf_size, hash, hash_size);
	if (0 != error)
		return (error);
	blocks_count = (msg_size / msg_block_size); /* message blocks count */
	msg_hash_block_size = (msg_block_size + hash_block_size);
	tm = (blocks_count * hash_block_size);
	if (key_size < (msg_hash_block_size + tm - 1)) /* Key to small? */
		return (EINVAL);
	digits = TOEPLITZ_PTR_TO64_ALIGNED8(tmbuf); /* 64 bit alligned buf. */
	hash_size = TOEPLITZ_BITS2BYTES(tm);

	/* XOR (M*S) with r */
	/* Get r0,r1...rw */
	bn_digits_r_shift_copy(digits, TOEPLITZ_BITS2DIGITS_COUNT(key_size),
	    key, TOEPLITZ_BITS2BYTES(key_size),
	    (msg_hash_block_size - 1)); // == (key_size - hash_size)
	buf_xor(hash, (uint8_t*)digits, hash_size);

	return (0);
}





#ifdef TOEPLITZ_SELF_TEST

#define TOEPLITZ_TEST_LEN 4096


typedef struct toeplitz_test0_vectors_s {
	uint8_t	*matr;
	size_t	matr_size;
	size_t	rows_count;
	size_t	cols_count;
	uint8_t *vec;
	size_t	vec_size;
	uint8_t	*res;
	size_t	res_size;
} toeplitz_tst0v_t, *toeplitz_tst0v_p;

static toeplitz_tst0v_t toeplitz_tst0v[] = {
	{ /* 0. From Vedapro */
		/*.matr =*/ 	(uint8_t
		/*.matr_size =*/	2915,
		/*.rows_count =*/	972,
		/*.cols_count =*/	1944,
		/*.vec =*/ 	(uint8_t*)"111110110100111000011100111111111011101100011010001001001000011100000000111011110101101101111000011011011111110001000010000111111111010100010001000010001011100110101111110100101111101100001001011111100100100111001110111100001001001010100101101111001100000111101110101010111111001000110000011001011001110000110001011001111000100011010001101100100000100101110010011111111010100101001110001111110101010011111000110111010100011100100111000001001110100000011011101101000001101110000101000101111000010010110110111001111111001110101000001111000011001101000100100100001000010101000111100011111111100101111010110101011110101101101010001100000101010000001110100100010111100101110010011010010000111110100001000011100111000010000100110111101010000111000110010101001001000001110001110100100011110001101011101110110010000111111000011011101110011101101101110000100101110101101101110000000010111101101001100000001011111011111111110001011101001100110011110100110000011101001111010101110001101101110110011101010110000000000000110011010100101001000000110001011100101101000111001011010111001110010000111110111010101010111111000100011100111000101100100010001111110000001100110110101000001101101110001100001100000100010101010101011110001110011110011100010111101111011010111100011001001110011010001011010110001011110010011001100100010011100000101010001011100110100011101010101010000100010110001011010111000111000110010100010101011000101000010000100011001010001110001111101001001101000000001000110110101001001110000011010010001000001101110111101100011011101011100100111100010011100010100001011111010111000000011011011110011000000100001001000011000110000100111111001100101111011010011101011001011010010000101111100001111101111011111000101011000000110010011101010000110000000101100100001001100111111111101011001001111111101000101001000100111000001000000010011110000011001111101100111111100001001010101111011010101110110110100110011000100001110001010001001110111011001111",
		/*.vec_size =*/		1944,
		/*.res =*/ 	(uint8_t
		/*.res_size =*/		972,
	}, { /* 1. From Vedapro */
		/*.matr =*/ 	(uint8_t
		/*.matr_size =*/	2915,
		/*.rows_count =*/	972,
		/*.cols_count =*/	1944,
		/*.vec =*/ 	(uint8_t
		/*.vec_size =*/		1944,
		/*.res =*/ 	(uint8_t
		/*.res_size =*/		972,
	}, { /* 2. From Vedapro */
		/*.matr =*/ 	(uint8_t
		/*.matr_size =*/	2915,
		/*.rows_count =*/	972,
		/*.cols_count =*/	1944,
		/*.vec =*/ 	(uint8_t
		/*.vec_size =*/		1944,
		/*.res =*/ 	(uint8_t
		/*.res_size =*/		972,
	}, { /* 3. From Vedapro */
		/*.matr =*/ 	(uint8_t
		/*.matr_size =*/	2915,
		/*.rows_count =*/	972,
		/*.cols_count =*/	1944,
		/*.vec =*/ 	(uint8_t
		/*.vec_size =*/		1944,
		/*.res =*/ 	(uint8_t
		/*.res_size =*/		972,
	}, { /* 4. From Vedapro */
		/*.matr =*/ 	(uint8_t
		/*.matr_size =*/	2915,
		/*.rows_count =*/	972,
		/*.cols_count =*/	1944,
		/*.vec =*/ 	(uint8_t
		/*.vec_size =*/		1944,
		/*.res =*/ 	(uint8_t
		/*.res_size =*/		972,
	}, {  /* NULL */
		/*.matr =*/ 		NULL,
		/*.matr_size =*/	0,
		/*.rows_count =*/	0,
		/*.cols_count =*/	0,
		/*.vec =*/ 		NULL,
		/*.vec_size =*/		0,
		/*.res =*/ 		NULL,
		/*.res_size =*/		0,
	}
};


typedef struct toeplitz_test1_vectors_s {
	uint8_t *msg;
	size_t	msg_size;
	size_t	msg_blk_size;
	uint8_t	*key;
	size_t	key_size;
	uint8_t	*hash;
	size_t	hash_size;
	size_t	hash_block_size;
} toeplitz_tst1v_t, *toeplitz_tst1v_p;

static toeplitz_tst1v_t toeplitz_tst1v[] = {
	{ /* 0. From RQC sample */
		/*.msg =*/ 	(uint8_t*)"010001100011000",
		/*.msg_size =*/		15,
		/*.msg_blk_size =*/	15,
		/*.key =*/ 	(uint8_t*)"001100111010001110011010",
		/*.key_size =*/		24,
		/*.hash =*/ 	(uint8_t*)"01100",
		/*.hash_size =*/	5,
		/*.hash_block_size = */	5,
	}, { /* 3. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"1110001111111000010101101000001010101100001011001000001000010010011111011111001001100110111111111111011110011010100011100111001000101101111001100011001101111011001000001010000000100101101111000110000011100101101010110101010101100101111100110000110001111001",
		/*.msg_size =*/		256,
		/*.msg_blk_size =*/	16,
		/*.key =*/ 	(uint8_t*)"1000000001011110101011001100000110100001110000010010000110100001000110100101100111010000101000011011100010100000011110001010111010011010111110010011101",
		/*.key_size =*/		151,
		/*.hash =*/ 	(uint8_t*)"10011100",
		/*.hash_size =*/	8,
		/*.hash_block_size = */	8,
	}, { /* 4. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"100001011110101100011110100110000010101011101111011101110100000110110001100011000011100111111010",
		/*.msg_size =*/		96,
		/*.msg_blk_size =*/	32,
		/*.key =*/ 	(uint8_t*)"00011101010010111110010001011111001",
		/*.key_size =*/		35,
		/*.hash =*/ 	(uint8_t*)"101",
		/*.hash_size =*/	3,
		/*.hash_block_size = */	1,
	}, { /* 5. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"011000101111110111010101000110011100000000100010010010011000111110100111011000010100001110001000",
		/*.msg_size =*/		96,
		/*.msg_blk_size =*/	32,
		/*.key =*/ 	(uint8_t*)"010111011010101110001111111001000101111",
		/*.key_size =*/		39,
		/*.hash =*/ 	(uint8_t*)"101010",
		/*.hash_size =*/	6,
		/*.hash_block_size = */	2,
	}, { /* 6. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"000010000100000101101110100000001011110110011010110011011000010010110110010111101001001000111111",
		/*.msg_size =*/		96,
		/*.msg_blk_size =*/	32,
		/*.key =*/ 	(uint8_t*)"1111010011001000111111001000111000110011110",
		/*.key_size =*/		43,
		/*.hash =*/ 	(uint8_t*)"100001111",
		/*.hash_size =*/	9,
		/*.hash_block_size = */	3,
	}, { /* 7. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"000111101110011101001011001010111011100111100100111101000001010001111101101100100010000011100101",
		/*.msg_size =*/		96,
		/*.msg_blk_size =*/	32,
		/*.key =*/ 	(uint8_t*)"11101011101111010011110001001011110110000100101",
		/*.key_size =*/		47,
		/*.hash =*/ 	(uint8_t*)"000010100111",
		/*.hash_size =*/	12,
		/*.hash_block_size = */	4,
	}, { /* 8. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"011011100010010100111111100100100000001100101001100000011110001011011111110101100011010100001001",
		/*.msg_size =*/		96,
		/*.msg_blk_size =*/	32,
		/*.key =*/ 	(uint8_t*)"001100001110101101100111001011011111011100101111111",
		/*.key_size =*/		51,
		/*.hash =*/ 	(uint8_t*)"110111111001010",
		/*.hash_size =*/	15,
		/*.hash_block_size = */	5,
	}, { /* 9. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"111100101101001011010111110000011101011101100011011110110010110110101001101010101100111100010011",
		/*.msg_size =*/		96,
		/*.msg_blk_size =*/	32,
		/*.key =*/ 	(uint8_t*)"0110110111100000111010110110111011011001001001111010100",
		/*.key_size =*/		55,
		/*.hash =*/ 	(uint8_t*)"000100010000110101",
		/*.hash_size =*/	18,
		/*.hash_block_size = */	6,
	}, { /* 10. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"110010110100101110011110000100000101110111100100001000001100011000100001000011110000011100010010",
		/*.msg_size =*/		96,
		/*.msg_blk_size =*/	32,
		/*.key =*/ 	(uint8_t*)"11111001001100000110011011100101101001100010011100110011010",
		/*.key_size =*/		59,
		/*.hash =*/ 	(uint8_t*)"010101001101001101010",
		/*.hash_size =*/	21,
		/*.hash_block_size = */	7,
	}, { /* 11. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"101011110000101101011000101111001010010000100100101000011110101010100101010110010101101011001110",
		/*.msg_size =*/		96,
		/*.msg_blk_size =*/	32,
		/*.key =*/ 	(uint8_t*)"101011011110010001111010010110111100110111010001001101001110000",
		/*.key_size =*/		63,
		/*.hash =*/ 	(uint8_t*)"001101001100100100100000",
		/*.hash_size =*/	24,
		/*.hash_block_size = */	8,
	}, { /* 12. From Vedapro */
		/*.msg =*/ 	(uint8_t*)"101101001111100101000111100100110100100000001111000000100110010100101000011110110000111110110100",
		/*.msg_size =*/		96,
		/*.msg_blk_size =*/	32,
		/*.key =*/ 	(uint8_t*)"0001011100000001001111001110101100000101110111110111110100011011111",
		/*.key_size =*/		67,
		/*.hash =*/ 	(uint8_t*)"001101101001101100110011110",
		/*.hash_size =*/	27,
		/*.hash_block_size = */	9,
	}, { /* NULL */
		/*.msg =*/ 		NULL,
		/*.msg_size =*/		0,
		/*.msg_blk_size =*/	0,
		/*.key =*/ 		NULL,
		/*.key_size =*/		0,
		/*.hash =*/		NULL,
		/*.hash_size =*/	0,
		/*.hash_block_size =*/	0,
	}
};


static inline void
toeplitz_cvt_bin(uint8_t *buf, size_t buf_size, uint8_t *bin) {
	static uint8_t *bin_tbl = (uint8_t*)"01";
	register uint8_t *buf_max, byte;

	for (buf_max = (buf + buf_size); buf < buf_max; buf ++) {
		byte = (*buf);
		(*bin ++) = bin_tbl[((byte >> 0) & 0x01)];
		(*bin ++) = bin_tbl[((byte >> 1) & 0x01)];
		(*bin ++) = bin_tbl[((byte >> 2) & 0x01)];
		(*bin ++) = bin_tbl[((byte >> 3) & 0x01)];
		(*bin ++) = bin_tbl[((byte >> 4) & 0x01)];
		(*bin ++) = bin_tbl[((byte >> 5) & 0x01)];
		(*bin ++) = bin_tbl[((byte >> 6) & 0x01)];
		(*bin ++) = bin_tbl[((byte >> 7) & 0x01)];
	}
	(*bin) = 0;
}

/* Import from little-endian hex string (L->H). */
static inline int
toeplitz_import_le_bin(uint8_t *a, size_t count, uint8_t *buf, size_t buf_size) {
	register uint8_t *r_pos, *r_pos_max, *w_pos, *w_pos_max, cur_char, byte = 0;
	register size_t cnt;

	if (0 == count || 0 == buf_size)
		return (EINVAL);
	if ((count * sizeof(uint8_t)) < (buf_size / 8))
		return (EOVERFLOW);
	r_pos = buf;
	r_pos_max = (r_pos + buf_size);
	w_pos = (uint8_t*)a;
	w_pos_max = (w_pos + (count * sizeof(uint8_t)));

	for (cnt = 0; r_pos < r_pos_max; r_pos ++) {
		byte = (byte >> 1);
		cur_char = (*r_pos);
		if ('1' == cur_char) {
			byte |= (1 << 7);
		}
		cnt ++;
		if (8 > cnt) /* Wait untill 8 bit before write a byte. */
			continue;
		if (w_pos == w_pos_max)
			return (EOVERFLOW);
		(*w_pos ++) = byte;
		byte = 0;
		cnt = 0;
	}
	if (0 != cnt) { /* Last bits, less then byte. */
		byte = (byte >> (8 - cnt));
		if (w_pos == w_pos_max)
			return (EOVERFLOW);
		(*w_pos ++) = byte;
	}
	memset(w_pos, 0, (size_t)(w_pos_max - w_pos));
	return (0);
}


/* 0 - OK, non zero - error */
static inline int
toeplitz_self_test() {
	int error = 0;
	size_t i;
	toeplitz_tst0v_t tst0v;
	toeplitz_tst1v_t tst1v;
	uint8_t	msg[TOEPLITZ_TEST_LEN];
	uint8_t	key[TOEPLITZ_TEST_LEN];
	uint8_t	hash[TOEPLITZ_TEST_LEN];
	uint8_t	result[TOEPLITZ_TEST_LEN];
	uint8_t	tmpbuf[TOEPLITZ_TEST_LEN];


	/* Test 0: mart mult. */
	for (i = 0; 0 != toeplitz_tst0v[i].matr_size; i ++) {
		memset(&tst0v, 0, sizeof(tst0v));

		if (0 != toeplitz_import_le_bin(key, sizeof(key), toeplitz_tst0v[i].matr, toeplitz_tst0v[i].matr_size)) {
			toeplitz_print("test 0: toeplitz_import_le_bin(toeplitz_tst0v[%zu].matr) fail!\n", i);
			error ++;
			continue;
		}
		tst0v.matr = key;
		tst0v.matr_size = toeplitz_tst0v[i].matr_size;
		tst0v.rows_count = toeplitz_tst0v[i].rows_count;
		tst0v.cols_count = toeplitz_tst0v[i].cols_count;

		if (0 != toeplitz_import_le_bin(msg, sizeof(msg), toeplitz_tst0v[i].vec, toeplitz_tst0v[i].vec_size)) {
			toeplitz_print("test 0: toeplitz_import_le_bin(toeplitz_tst0v[%zu].key) fail!\n", i);
			error ++;
			continue;
		}
		tst0v.vec = msg;
		tst0v.vec_size = toeplitz_tst0v[i].vec_size;

		if (0 != toeplitz_import_le_bin(hash, sizeof(hash), toeplitz_tst0v[i].res, toeplitz_tst0v[i].res_size)) {
			toeplitz_print("test 0: toeplitz_import_le_bin(toeplitz_tst0v[%zu].res) fail!\n", i);
			error ++;
			continue;
		}
		tst0v.res = hash;
		tst0v.res_size = TOEPLITZ_BITS2BYTES(toeplitz_tst0v[i].res_size);

		/* mult test. */
		if (0 != toeplitz_mult(tst0v.matr, tst0v.matr_size,
		    tst0v.rows_count, tst0v.cols_count,
		    tst0v.vec, tst0v.vec_size,
		    result, (sizeof(result) * 8))) {
			toeplitz_cvt_bin(result, tst0v.res_size, tmpbuf);
			toeplitz_print("test 0: %zu toeplitz_mult: FAIL!\n",
			    i);
			error ++;
		} else {
			if (0 != memcmp(tst0v.res, result, tst0v.res_size)) {
				toeplitz_cvt_bin(result, tst0v.res_size, tmpbuf);
				toeplitz_print("test 0: %zu toeplitz_mult:      ERROR: %s != %s (calculated)\n",
				    i, toeplitz_tst0v[i].res, tmpbuf);
				error ++;
			}
		}
		if (0 != toeplitz_mult_fast(tst0v.matr, tst0v.matr_size,
		    tst0v.rows_count, tst0v.cols_count,
		    tst0v.vec, tst0v.vec_size, tmpbuf, sizeof(tmpbuf),
		    result, (sizeof(result) * 8))) {
			//toeplitz_cvt_bin(result, tst0v.res_size, tmpbuf);
			//toeplitz_print("test 0: %zu toeplitz_mult_fast: SKIPPED!\n",
			//    i);
		} else {
			if (0 != memcmp(tst0v.res, result, tst0v.res_size)) {
				toeplitz_cvt_bin(result, tst0v.res_size, tmpbuf);
				toeplitz_print("test 0: %zu toeplitz_mult_fast: ERROR: %s != %s (calculated)\n",
				    i, toeplitz_tst0v[i].res, tmpbuf);
				error ++;
			}
		}
		/* Unaligned. */
		memmove((msg + 1), msg, (sizeof(msg) - 1));
		tst0v.vec = (msg + 1);
		memmove((key + 1), key, (sizeof(key) - 1));
		tst0v.matr = (key + 1);
		if (0 != toeplitz_mult_fast(tst0v.matr, tst0v.matr_size,
		    tst0v.rows_count, tst0v.cols_count,
		    tst0v.vec, tst0v.vec_size, tmpbuf, sizeof(tmpbuf),
		    result, (sizeof(result) * 8))) {
			toeplitz_cvt_bin(result, tst0v.res_size, tmpbuf);
			toeplitz_print("test 0: %zu toeplitz_mult_fasU: SKIPPED!\n",
			    i);
		} else {
			if (0 != memcmp(tst0v.res, result, tst0v.res_size)) {
				toeplitz_cvt_bin(result, tst0v.res_size, tmpbuf);
				toeplitz_print("test 0: %zu toeplitz_mult_fasU: ERROR: %s != %s (calculated)\n",
				    i, toeplitz_tst0v[i].res, tmpbuf);
				error ++;
			}
		}
	}

	/* Test 1: mac calc. */
	for (i = 0; 0 != toeplitz_tst1v[i].msg_size; i ++) {
		memset(&tst1v, 0, sizeof(tst1v));

		if (0 != toeplitz_import_le_bin(msg, sizeof(msg), toeplitz_tst1v[i].msg, toeplitz_tst1v[i].msg_size)) {
			toeplitz_print("test 1: toeplitz_import_le_bin(toeplitz_tst1v[%zu].msg) fail!\n", i);
			error ++;
			continue;
		}
		tst1v.msg = msg;
		tst1v.msg_size = toeplitz_tst1v[i].msg_size;
		tst1v.msg_blk_size = toeplitz_tst1v[i].msg_blk_size;

		if (0 != toeplitz_import_le_bin(key, sizeof(key), toeplitz_tst1v[i].key, toeplitz_tst1v[i].key_size)) {
			toeplitz_print("test 1: toeplitz_import_le_bin(toeplitz_tst1v[%zu].key) fail!\n", i);
			error ++;
			continue;
		}
		tst1v.key = key;
		tst1v.key_size = toeplitz_tst1v[i].key_size;

		if (0 != toeplitz_import_le_bin(hash, sizeof(hash), toeplitz_tst1v[i].hash, toeplitz_tst1v[i].hash_size)) {
			toeplitz_print("test 1: toeplitz_import_le_bin(toeplitz_tst1v[%zu].hash) fail!\n", i);
			error ++;
			continue;
		}
		tst1v.hash = hash;
		tst1v.hash_size = TOEPLITZ_BITS2BYTES(toeplitz_tst1v[i].hash_size);
		tst1v.hash_block_size = toeplitz_tst1v[i].hash_block_size;

		/* hash test. */
		if (0 != toeplitz_hash(tst1v.msg, tst1v.msg_size, tst1v.msg_blk_size,
		    tst1v.key, tst1v.key_size, tst1v.hash_block_size,
		    result, (sizeof(result) * 8))) {
			toeplitz_cvt_bin(result, tst1v.hash_size, tmpbuf);
			toeplitz_print("test 1: %zu toeplitz_hash: FAIL!\n",
			    i);
			error ++;
		} else {
			if (0 != memcmp(tst1v.hash, result, tst1v.hash_size)) {
				toeplitz_cvt_bin(result, tst1v.hash_size, tmpbuf);
				toeplitz_print("test 1: %zu toeplitz_hash:      ERROR: %s != %s (calculated)\n",
				    i, toeplitz_tst1v[i].hash, tmpbuf);
				error ++;
			}
		}

		if (0 != toeplitz_hash_fast(tst1v.msg, tst1v.msg_size, tst1v.msg_blk_size,
		    tst1v.key, tst1v.key_size, tst1v.hash_block_size,
		    tmpbuf, sizeof(tmpbuf), result, (sizeof(result) * 8))) {
			toeplitz_cvt_bin(result, tst1v.hash_size, tmpbuf);
			toeplitz_print("test 1: %zu toeplitz_hash_fast: SKIPPED!\n",
			    i);
		} else {
			if (0 != memcmp(tst1v.hash, result, tst1v.hash_size)) {
				toeplitz_cvt_bin(result, tst1v.hash_size, tmpbuf);
				toeplitz_print("test 1: %zu toeplitz_hash_fast: ERROR: %s != %s (calculated)\n",
				    i, toeplitz_tst1v[i].hash, tmpbuf);
				error ++;
			}
		}
		/* Unaligned. */
		memmove((msg + 1), msg, (sizeof(msg) - 1));
		tst1v.msg = (msg + 1);
		memmove((key + 1), key, (sizeof(key) - 1));
		tst1v.key = (key + 1);
		if (0 != toeplitz_hash_fast(tst1v.msg, tst1v.msg_size, tst1v.msg_blk_size,
		    tst1v.key, tst1v.key_size, tst1v.hash_block_size,
		    tmpbuf, sizeof(tmpbuf), result, (sizeof(result) * 8))) {
			toeplitz_cvt_bin(result, tst1v.hash_size, tmpbuf);
			toeplitz_print("test 1: %zu toeplitz_hash_fasU: SKIPPED!\n",
			    i);
		} else {
			if (0 != memcmp(tst1v.hash, result, tst1v.hash_size)) {
				toeplitz_cvt_bin(result, tst1v.hash_size, tmpbuf);
				toeplitz_print("test 1: %zu toeplitz_hash_fasU: ERROR: %s != %s (calculated)\n",
				    i, toeplitz_tst1v[i].hash, tmpbuf);
				error ++;
			}
		}
	}

	return (error);
}
#endif

#endif /* TOEPLITZ_H */
